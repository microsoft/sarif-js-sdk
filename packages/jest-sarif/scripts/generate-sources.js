const fs = require('fs');
const path = require('path');
const { EOL } = require('os');
const ejs = require('ejs');
const fetch = require('sync-fetch');
const prettier = require('prettier');
const startCase = require('lodash.startcase');
const camelCase = require('lodash.camelcase');
const kebabCase = require('lodash.kebabcase');

const AUTOGENERATED_HEADER = '// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.';
const sarifSchema = fetch(
  'https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json'
).json();
const definitions = Object.keys(sarifSchema.definitions);

function generateDefinitions() {
  const definitionsPath = path.join(__dirname, '..', 'src', 'types', 'definitions.ts');
  const definitionsSource = `
  ${AUTOGENERATED_HEADER}

  export type Definitions = ${definitions.map((definition) => `"${definition}"`).join(` | ${EOL}`)};
`;

  writeFile(definitionsPath, definitionsSource);
}

function generateMatchers() {
  const matchersIndexExports = [
    {
      matcherName: 'toMatchSarifLog',
      matcherPath: 'to-match-sarif-log',
    },
  ];
  const template = getTemplate('to-match-sarif-template');

  for (const definition of definitions) {
    const destinationPath = getSourcePath(`to-match-sarif-${kebabCase(definition)}`);
    const type = startCase(camelCase(definition)).replace(/ /g, '');
    const data = {
      definition,
      type,
      maybeType: `Maybe${type}`,
      matcherName: `toMatchSarif${type}`,
    };

    const renderedMatcher = template(data);

    writeFile(destinationPath, renderedMatcher);

    matchersIndexExports.push({
      matcherName: `toMatchSarif${type}`,
      matcherPath: `to-match-sarif-${kebabCase(definition)}`,
    });
  }

  matchersIndexExports.sort();

  const indexTemplate = getTemplate('index');

  const renderedIndex = indexTemplate({
    matchers: matchersIndexExports,
  });

  writeFile(getSourcePath('index'), renderedIndex);
}

function getTemplate(templateName) {
  const templateSource = fs.readFileSync(
    path.join(__dirname, '..', 'templates', `${templateName}.ts.ejs`),
    { encoding: 'utf-8' }
  );

  return ejs.compile(templateSource);
}

function getSourcePath(fileName) {
  return path.join(__dirname, '..', 'src', 'matchers', `${fileName}.ts`);
}

function writeFile(filePath, contents) {
  prettier.resolveConfig(filePath).then((options) => {
    const formatted = prettier.format(contents, Object.assign({}, { parser: 'babel-ts' }, options));

    fs.writeFileSync(filePath, formatted);
  });
}

generateDefinitions();
generateMatchers();
